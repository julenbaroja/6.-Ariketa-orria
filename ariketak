module funtzioak


use mcf_tipos

public :: a1, a2, a3, a5, a52, a6

contains

function a1(x,y) result(yprima)

real(kind=dp), intent(in)               :: x
real(kind=dp), dimension(:), intent(in) :: y
real(kind=dp), dimension(size(y))       :: yprima
real(kind=dp) :: nu


nu=9.8_dp
yprima(1) = y(2)
yprima(2) = nu * sin(y(1))

end function a1


function a2(x, y) result(yprima)

real(kind = dp), intent(in) :: x
real(kind = dp), dimension(:), intent(in) :: y
real(kind = dp), dimension(size(y)) :: yprima
real(kind = dp) :: nu, mg

nu = 1.0_dp
mg = 1.0_dp

yprima(1) = y(2)
yprima(2) = - nu * sqrt(y(2)**2 + y(4)**2) * y(2)
yprima(3) = y(4)
yprima(4) = - mg - nu * sqrt(y(2)**2 + y(4)**2) * y(4)


end function a2


function a3(x, y) result(yprima)

real(kind = dp), intent(in) :: x
real(kind = dp), dimension(:), intent(in) :: y
real(kind = dp), dimension(size(y)) :: yprima

yprima(1) = y(2)
yprima(2) = -((x**2 - y(3)**2)*y(1) + x*y(2))/x**2
yprima(3) = 0.0_dp

end function a3



function a5(x, y) result(yprima)

real(kind = dp), intent(in) :: x
real(kind = dp), dimension(:), intent(in) :: y
real(kind = dp), dimension(size(y)) :: yprima
real(kind = dp) :: b, m, k, F

b = 1.0_dp
m = 2.0_dp
F = 3.0_dp
k = 3.0_dp

yprima(1) = y(2)
yprima(2) = - y(2) * b/m - y(1) * k/m + F*cos(x*sqrt(k/m))


end function a5

function a52(x, y) result(yprima)

real(kind = dp), intent(in) :: x
real(kind = dp), dimension(:), intent(in) :: y
real(kind = dp), dimension(size(y)) :: yprima
real(kind = dp) :: b, m, k

b = 1.0_dp
m = 2.0_dp
k = 3.0_dp

yprima(1) = y(2)
yprima(2) = - y(2) * b/m - y(1) * k/m


end function a52


function a6(x, y) result(yprima)

real(kind = dp), intent(in) :: x
real(kind = dp), dimension(:), intent(in) :: y
real(kind = dp), dimension(size(y)) :: yprima
real(kind = dp) :: x1, x2, x3, y1, y2, y3

x1 = y(1)
x2 = y(5)
x3 = y(9)
y1 = y(3)
y2 = y(7)
y3 = y(11)

yprima(1) = y(2)
yprima(2) = -2.0_dp * y(1) * y(2) - ((x2 - x1)/(sqrt((x2 - x1)**2 + (y2 - y1)**2)**3))&
        - ((x3 - x1)/(sqrt((x3 - x1)**2 + (y3 -  y1)**2)**3))
yprima(3) = y(4)
yprima(4) = -2.0_dp * y(3) * y(4) - ((y2 - y1)/(sqrt((x2 - x1)**2 + (y2 - y1)**2)**3)) &
        - ((y3 - y1)/(sqrt((x3 - x1)**2 + (y3 - y1)**2)**3))
yprima(5) = y(6)
yprima(6) = -2.0_dp * y(5) * y(6) + ((x2 - x1)/(sqrt((x2 - x1)**2 + (y2 - y1)**2)**3)) &
        - ((x3 - x2)/(sqrt((x3 - x2)**2 + (y3 - y2)**2)**3))
yprima(7) = y(8)
yprima(8) = -2.0_dp * y(7) * y(8) + ((y2 - y1)/(sqrt((x2 - x1)**2 + (y2 - y1)**2)**3)) &
        - ((y3 - y2)/(sqrt((x3 - x2)**2 + (y3 - y2)**2)**3))
yprima(9) = y(8)
yprima(10) = -2.0_dp * y(9) * y(10) - ((x2 - x3)/(sqrt((x2 - x3)**2 + (y2 - y3)**2)**3)) &
        + ((x3 - x1)/(sqrt((x3 - x1)**2 + (y3 - y1)**2)**3))
yprima(11) = y(12)
yprima(12) = -2.0_dp * y(11) * y(12) - ((y2 - y3)/(sqrt((x2 - x3)**2 + (y2 - y3)**2)**3)) &
        + ((y3 - y1)/(sqrt((x3 - x1)**2 + (y3 - y1)**2)**3))

end function a6


end module funtzioak
